// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RubricEntryComponent matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    dangerouslySetInnerHTML={
        Object {
            "__html": "val",
          }
    }
/>,
  "nodes": Array [
    <div
      dangerouslySetInnerHTML={
            Object {
                  "__html": "val",
                }
      }
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <RubricEntryComponent
        name="Steve Harvey"
        scorepoint="123"
        value="val"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": RubricEntryComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "name": "Steve Harvey",
          "scorepoint": "123",
          "value": "val",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          dangerouslySetInnerHTML={
                    Object {
                              "__html": "val",
                            }
          }
/>,
        "_debugID": 2,
        "_renderedOutput": <div
          dangerouslySetInnerHTML={
                    Object {
                              "__html": "val",
                            }
          }
/>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <RubricEntryComponent
    name="Steve Harvey"
    scorepoint="123"
    value="val"
/>,
}
`;

exports[`SampleResponseComponent matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="sample-response"
>
    <b>
        Purpose: 
    </b>
     
    purpose
     
    <br />
    <b>
        Sample Response: 
    </b>
     
    <br />
    <div
        dangerouslySetInnerHTML={
            Object {
                "__html": "sampleContent",
              }
        }
    />
</div>,
  "nodes": Array [
    <div
      className="sample-response"
>
      <b>
            Purpose: 
      </b>
       
      purpose
       
      <br />
      <b>
            Sample Response: 
      </b>
       
      <br />
      <div
            dangerouslySetInnerHTML={
                  Object {
                        "__html": "sampleContent",
                      }
            }
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <SampleResponseComponent
        name="name"
        purpose="purpose"
        sampleContent="sampleContent"
        scorePoint="scorePoint"
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": SampleResponseComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "name": "name",
          "purpose": "purpose",
          "sampleContent": "sampleContent",
          "scorePoint": "scorePoint",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="sample-response"
>
          <b>
                    Purpose: 
          </b>
           
          purpose
           
          <br />
          <b>
                    Sample Response: 
          </b>
           
          <br />
          <div
                    dangerouslySetInnerHTML={
                              Object {
                                        "__html": "sampleContent",
                                      }
                    }
          />
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="sample-response"
>
          <b>
                    Purpose: 
          </b>
           
          purpose
           
          <br />
          <b>
                    Sample Response: 
          </b>
           
          <br />
          <div
                    dangerouslySetInnerHTML={
                              Object {
                                        "__html": "sampleContent",
                                      }
                    }
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <SampleResponseComponent
    name="name"
    purpose="purpose"
    sampleContent="sampleContent"
    scorePoint="scorePoint"
/>,
}
`;

exports[`rubric component matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="item-information-content"
>
    <div>
        <h4>
            Rubrics
        </h4>
        <RubricEntryComponent
            name="Steve Harvey"
            scorepoint="123"
            value="val"
        />
    </div>
</div>,
  "nodes": Array [
    <div
      className="item-information-content"
>
      <div>
            <h4>
                  Rubrics
            </h4>
            <RubricEntryComponent
                  name="Steve Harvey"
                  scorepoint="123"
                  value="val"
            />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <RubricComponent
        language="english"
        rubricEntries={
                Array [
                        Object {
                          "name": "Steve Harvey",
                          "scorepoint": "123",
                          "value": "val",
                        },
                      ]
        }
        samples={Array []}
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": RubricComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "language": "english",
          "rubricEntries": Array [
            Object {
              "name": "Steve Harvey",
              "scorepoint": "123",
              "value": "val",
            },
          ],
          "samples": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="item-information-content"
>
          <div>
                    <h4>
                              Rubrics
                    </h4>
                    <RubricEntryComponent
                              name="Steve Harvey"
                              scorepoint="123"
                              value="val"
                    />
          </div>
</div>,
        "_debugID": 6,
        "_renderedOutput": <div
          className="item-information-content"
>
          <div>
                    <h4>
                              Rubrics
                    </h4>
                    <RubricEntryComponent
                              name="Steve Harvey"
                              scorepoint="123"
                              value="val"
                    />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <RubricComponent
    language="english"
    rubricEntries={
        Array [
            Object {
              "name": "Steve Harvey",
              "scorepoint": "123",
              "value": "val",
            },
          ]
    }
    samples={Array []}
/>,
}
`;
